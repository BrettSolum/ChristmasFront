{"version":3,"sources":["Components/ChristmasHeader.js","api.js","Components/FamilySelector.js","Components/UserCard.js","Components/FamilyList.js","App.js","serviceWorker.js","index.js","Images/XmasTree.png"],"names":["ChristmasHeader","Header","as","Image","src","XmasTree","url","api","axios","get","then","response","data","catch","error","console","log","finally","family","user","FamilySelector","selectedFamilyId","onFamilySelect","useState","loadedFamilies","setLoadedFamilies","useEffect","getFamilyList","map","item","key","id","content","Dimmer","active","Loader","length","Menu","items","activeIndex","findIndex","x","onItemClick","UserCard","spouse","exchange","spouseId","spouseName","exchangeUserId","exchangeUserName","Card","Content","first","last","Meta","Description","FamilyList","loadedUsers","setLoadedUsers","getFamilyUsers","Group","App","setSelectedFamilyId","className","event","familyIndex","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.1bacbd0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Header, Image} from \"semantic-ui-react\";\r\nimport XmasTree from \"../Images/XmasTree.png\";\r\n\r\nfunction ChristmasHeader() {\r\n\r\n    return (\r\n        <Header as='h1'>\r\n            <Image src={XmasTree}/>\r\n            Christmas Exchange Magic\r\n            <Image src={XmasTree}/>\r\n        </Header>\r\n    );\r\n}\r\n\r\nexport default ChristmasHeader;\r\n","import axios from \"axios\";\r\n\r\nconst url = 'https://localhost:5001/api';\r\n\r\nclass api {\r\n    static getFamilyList(){\r\n        return axios.get(url + '/Families')\r\n            .then(function (response) {\r\n                //handle success\r\n                return response.data;\r\n            })\r\n            .catch(function (error) {\r\n                //handle error\r\n                console.log(error);\r\n            })\r\n            .finally(function () {\r\n                //always executed\r\n                console.log(\"attempted call to \" + url + \"/Families\");\r\n            })\r\n    }\r\n\r\n    static getFamilyUsers(family){\r\n        return axios.get(url + '/Families/' + family + '/Users')\r\n            .then(function (response) {\r\n                return response.data;\r\n            })\r\n            .catch(function(error) {\r\n                console.log(error);\r\n            })\r\n            .finally(function() {\r\n                console.log(\"attempted call to \" + url + \"/Families/\" + family + \"/Users\")\r\n            })\r\n    }\r\n\r\n    static getUser(user){\r\n        return axios.get(url + '/Users' + user)\r\n            .then(function(response) {\r\n                return response.data;\r\n            })\r\n            .catch(function(error) {\r\n                console.log(error);\r\n            })\r\n            .finally(function() {\r\n                console.log('attempted call to ' + url + '/Users/' + user)\r\n            })\r\n    }\r\n}\r\n\r\nexport default api;","import React, { useState, useEffect} from 'react';\r\nimport {Menu, Loader, Dimmer} from \"semantic-ui-react\";\r\nimport api from \"../api\";\r\n\r\nfunction FamilySelector({selectedFamilyId, onFamilySelect}) {\r\n\r\n    const [loadedFamilies, setLoadedFamilies] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        api.getFamilyList().then(data => {\r\n            setLoadedFamilies(data.map((item) => {\r\n                return {\r\n                    key: item.id,\r\n                    ...item\r\n                }\r\n            }))\r\n        });\r\n    }, []);\r\n\r\n    let content = <Dimmer active><Loader/></Dimmer>\r\n\r\n    if (loadedFamilies && loadedFamilies.length > 0 ) {\r\n        content = <Menu\r\n            items={loadedFamilies}\r\n            activeIndex={loadedFamilies.findIndex(x => x.id === selectedFamilyId)}\r\n            onItemClick={onFamilySelect}\r\n        />\r\n    };\r\n\r\n    return (\r\n        content\r\n    );\r\n}\r\n\r\nexport default FamilySelector;\r\n","import React, { useState, useEffect} from 'react';\r\nimport api from \"../api\";\r\nimport {Card} from \"semantic-ui-react\";\r\n\r\nfunction UserCard({user}) {\r\n\r\n    let spouse, exchange;\r\n\r\n    if (!user.spouseId) {\r\n        spouse = 'none';\r\n    } else {\r\n        spouse = user.spouseName;\r\n    }\r\n\r\n    if (!user.exchangeUserId) {\r\n        exchange = 'none';\r\n    } else {\r\n        exchange = user.exchangeUserName;\r\n    }\r\n\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Content>\r\n                <Card.Header>{user.first + \" \" + user.last}</Card.Header>\r\n                <Card.Meta>{'Spouse: ' + spouse}</Card.Meta>\r\n                <Card.Description>{'Exchange: ' + exchange}</Card.Description>\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default UserCard;\r\n","import React, { useState, useEffect} from 'react';\r\nimport api from \"../api\";\r\nimport {Card, Segment, Button} from \"semantic-ui-react\";\r\nimport UserCard from './UserCard';\r\n\r\nfunction FamilyList({selectedFamilyId}) {\r\n\r\n    const [loadedUsers, setLoadedUsers] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        api.getFamilyUsers(selectedFamilyId).then(data => {\r\n            if(data && data.length > 0) {\r\n                setLoadedUsers(data)\r\n            }\r\n        });\r\n    }, [selectedFamilyId]);\r\n\r\n    let content;\r\n\r\n    if(!loadedUsers && loadedUsers <=0){\r\n        content = <div/>;\r\n    } else {\r\n        content = (\r\n            <Card.Group>\r\n                {loadedUsers.map((item) => (\r\n                    <UserCard\r\n                        key={item.id}\r\n                        user={item}\r\n                    />\r\n                ))}\r\n            </Card.Group>\r\n        );\r\n    }\r\n\r\n    return (\r\n        content\r\n    );\r\n}\r\n\r\nexport default FamilyList;\r\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport ChristmasHeader from './Components/ChristmasHeader.js';\nimport FamilySelector from './Components/FamilySelector.js';\nimport FamilyList from './Components/FamilyList';\n\nfunction App() {\n\n    const [selectedFamilyId, setSelectedFamilyId] = useState(0);\n\n    const familySelectHandler = (event, data) => {\n        const familyIndex = data.id;\n        setSelectedFamilyId(familyIndex);\n    }\n\n  return (\n    <div className=\"App\">\n        <ChristmasHeader/>\n        <FamilySelector\n            selectedFamilyId = {selectedFamilyId}\n            onFamilySelect = {familySelectHandler}\n        />\n        <FamilyList\n            selectedFamilyId = {selectedFamilyId}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/XmasTree.ac29ad2c.png\";"],"sourceRoot":""}